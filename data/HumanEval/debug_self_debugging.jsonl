{"task_id": "HumanEval/18", "input": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n", "prompt": "Solve the following problem:\n\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n", "output": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string.\n    Count overlapping cases.\n\n    Args:\n        string (str): The original string.\n        substring (str): The substring to find.\n\n    Returns:\n        int: The number of times the substring can be found in the original string.\n    \"\"\"\n    count = 0\n    index = 0\n\n    # Loop until the substring is not found in the string\n    while True:\n        # Find the index of the substring in the string, starting from the current index\n        index = string.find(substring, index)\n\n        # If the substring is not found, break the loop\n        if index == -1:\n            break\n\n        # Increment the count and move the index to the end of the found substring\n        count += 1\n        index += len(substring)\n\n    return count"}
{"task_id": "HumanEval/32", "input": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n", "prompt": "Solve the following problem:\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n", "output": "None"}
{"task_id": "HumanEval/33", "input": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n", "prompt": "Solve the following problem:\n\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n", "output": "def sort_third(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, \n    while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n\n    Args:\n        l (list): The input list.\n\n    Returns:\n        list: The modified list.\n    \"\"\"\n    # Use list comprehension to create a new list where values at indices divisible by 3 are sorted\n    return [x if i % 3 != 0 else sorted([y for y in l if y % 3 == 0])[i % 3] for i, x in enumerate(l)]"}
{"task_id": "HumanEval/40", "input": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n", "prompt": "Solve the following problem:\n\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n", "output": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            if -complement in seen:\n                return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/41", "input": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n", "prompt": "Solve the following problem:\n\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n", "output": "def car_race_collision(n: int):\n    \"\"\"\n    Calculate the number of collisions in a car race.\n\n    Args:\n    n (int): The number of cars in each direction.\n\n    Returns:\n    int: The number of collisions.\n    \"\"\"\n    # Initialize the number of collisions to 0\n    collisions = 0\n\n    # Iterate over the cars moving left to right\n    for i in range(n):\n        # Iterate over the cars moving right to left\n        for j in range(n):\n            # If the cars collide, increment the number of collisions\n            if i + j == n - 1:\n                collisions += 1\n\n    # Return the total number of collisions\n    return collisions"}
{"task_id": "HumanEval/46", "input": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n", "prompt": "Solve the following problem:\n\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n", "output": "None"}
{"task_id": "HumanEval/54", "input": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n", "prompt": "Solve the following problem:\n\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n", "output": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n\n    Args:\n        s0 (str): The first word.\n        s1 (str): The second word.\n\n    Returns:\n        bool: True if the words have the same characters, False otherwise.\n    \"\"\"\n    # Remove duplicate characters from each word and compare the results\n    return sorted(set(s0)) == sorted(set(s1))"}
{"task_id": "HumanEval/55", "input": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n", "prompt": "Solve the following problem:\n\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n", "output": "def fib(n: int):\n    \"\"\"\n    Return n-th Fibonacci number.\n\n    Args:\n    n (int): The position of the Fibonacci number to return.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Examples:\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    memo = {0: 0, 1: 1}  # Initialize memoization dictionary\n\n    def fib_helper(k: int) -> int:\n        \"\"\"\n        Helper function to calculate the k-th Fibonacci number using memoization.\n        \"\"\"\n        if k not in memo:\n            # If k is not in the memo dictionary, calculate it and store it\n            memo[k] = fib_helper(k - 1) + fib_helper(k - 2)\n        return memo[k]\n\n    return fib_helper(n)"}
{"task_id": "HumanEval/65", "input": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n", "prompt": "Solve the following problem:\n\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n", "output": "def circular_shift(x, shift):\n    \"\"\"\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n\n    Args:\n        x (int): The input integer.\n        shift (int): The number of positions to shift the digits.\n\n    Returns:\n        str: The result of the circular shift as a string.\n    \"\"\"\n    # Convert the integer to a string to easily access and manipulate its digits\n    str_x = str(x)\n    \n    # Calculate the effective shift, taking into account the number of digits\n    effective_shift = shift % len(str_x)\n    \n    # If the shift is greater than the number of digits, return the digits reversed\n    if effective_shift == 0:\n        return str_x[::-1]\n    \n    # Otherwise, perform the circular shift\n    else:\n        return str_x[-effective_shift:] + str_x[:-effective_shift]"}
{"task_id": "HumanEval/70", "input": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n", "prompt": "Solve the following problem:\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n", "output": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        list: The list in strange order.\n    \"\"\"\n    if not lst:  # If the list is empty, return it as is\n        return lst\n\n    result = []  # Initialize an empty list to store the result\n    min_val = max_val = float('inf')  # Initialize min and max values as infinity\n\n    for num in lst:  # Iterate over the list\n        if num < min_val:  # If the current number is smaller than the current min value\n            min_val = num  # Update the min value\n        elif num > max_val:  # If the current number is larger than the current max value\n            max_val = num  # Update the max value\n\n    result.append(min_val)  # Add the min value to the result\n    lst.remove(min_val)  # Remove the min value from the list\n    lst.remove(max_val)  # Remove the max value from the list\n\n    while lst:  # While the list is not empty\n        min_val = float('inf')  # Reset the min value as infinity\n        for num in lst:  # Iterate over the list\n            if num < min_val:  # If the current number is smaller than the current min value\n                min_val = num  # Update the min value\n        result.append(min_val)  # Add the min value to the result\n        lst.remove(min_val)  # Remove the min value from the list\n\n    return result  # Return the result"}
{"task_id": "HumanEval/73", "input": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n", "prompt": "Solve the following problem:\n\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n", "output": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The minimum number of elements that need to be changed.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Initialize the count of elements that need to be changed\n    count = 0\n\n    # Iterate over the frequency dictionary\n    for num, freq_num in freq.items():\n        # If the frequency is odd, increment the count by 1\n        if freq_num % 2 != 0:\n            count += 1\n\n    # The minimum number of elements that need to be changed is the count of elements with odd frequency\n    return count"}
{"task_id": "HumanEval/75", "input": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n", "prompt": "Solve the following problem:\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n", "output": "def is_multiply_prime(a):\n    \"\"\"\n    Returns True if the given number is the multiplication of 3 prime numbers and False otherwise.\n\n    Args:\n        a (int): The number to check.\n\n    Returns:\n        bool: Whether the number is the multiplication of 3 prime numbers.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"Helper function to check if a number is prime.\"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Generate all prime numbers less than or equal to a\n    primes = [i for i in range(2, a + 1) if is_prime(i)]\n\n    # Check if a can be expressed as the product of 3 prime numbers\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n\n    return False"}
{"task_id": "HumanEval/76", "input": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n", "prompt": "Solve the following problem:\n\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n", "output": "import math\n\ndef is_simple_power(x, n):\n    \"\"\"\n    Returns True if a number x is a simple power of n, False otherwise.\n    \n    A number x is a simple power of n if n**int(x**(1/n)) == x.\n    \n    Parameters:\n    x (int): The number to check.\n    n (int): The base number.\n    \n    Returns:\n    bool: True if x is a simple power of n, False otherwise.\n    \"\"\"\n    if x <= 0 or n <= 0:\n        return False\n    \n    root = math.pow(x, 1/n)\n    return math.isclose(root, round(root)) and n**round(root) == x"}
{"task_id": "HumanEval/80", "input": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n", "prompt": "Solve the following problem:\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n", "output": "def is_happy(s):\n    \"\"\"\n    Checks if a given string is happy or not.\n    \n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \n    Parameters:\n    s (str): The input string.\n    \n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \"\"\"\n    # Check if the string's length is at least 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate over the string in steps of 3\n    for i in range(0, len(s) - 2, 3):\n        # Get the current 3 consecutive letters\n        window = s[i:i+3]\n        \n        # Check if all letters in the window are distinct\n        if len(set(window)) != 3:\n            return False\n    \n    # If we've checked all windows and haven't returned False, the string is happy\n    return True'"}
{"task_id": "HumanEval/83", "input": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n", "prompt": "Solve the following problem:\n\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n", "output": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Calculate the total number of n-digit numbers\n    total_numbers = 9 * (10 ** (n - 2)) + 10 ** (n - 1)\n    \n    # Calculate the number of n-digit numbers that start with 1\n    start_with_one = 10 ** (n - 1)\n    \n    # Calculate the number of n-digit numbers that end with 1\n    end_with_one = 9 * (10 ** (n - 2))\n    \n    # Calculate the number of n-digit numbers that both start and end with 1\n    both_start_end_with_one = 10 ** (n - 2)\n    \n    # Return the total count of numbers that start or end with 1\n    return start_with_one + end_with_one - both_start_end_with_one"}
{"task_id": "HumanEval/84", "input": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n", "prompt": "Solve the following problem:\n\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n", "output": "def solve(N):\n    \"\"\"\n    Given a positive integer N, return the total sum of its digits in binary.\n    \n    Parameters:\n    N (int): A positive integer between 0 and 10000.\n    \n    Returns:\n    str: A string of binary number representing the sum of digits of N in binary.\n    \"\"\"\n    \n    # Convert the integer to binary and remove the '0b' prefix\n    binary = bin(N)[2:]\n    \n    # Calculate the sum of digits in binary\n    sum_of_digits = sum(int(digit) for digit in binary)\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(sum_of_digits)[2:]\n    \n    return binary_sum\n\n# Test cases\nprint(solve(1000))  # Output: 1\nprint(solve(150))   # Output: 110\nprint(solve(147))   # Output: 1100"}
{"task_id": "HumanEval/89", "input": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n", "prompt": "Solve the following problem:\n\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n", "output": "def encrypt(s):\n    \"\"\"\n    Encrypts a string by rotating the alphabet down by 4 places.\n    \n    Args:\n        s (str): The input string to be encrypted.\n    \n    Returns:\n        str: The encrypted string.\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset + 4 * 2) % 26 + ascii_offset)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "input": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n", "prompt": "Solve the following problem:\n\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n", "output": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping case of all letters and replacing \n    all vowels with the letter that appears 2 places ahead of that \n    vowel in the english alphabet.\n\n    Args:\n        message (str): The input message to be encoded.\n\n    Returns:\n        str: The encoded message.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n\n    for char in message:\n        # Swap case of the character\n        encoded_char = char.swapcase()\n\n        # Check if the character is a vowel\n        if encoded_char in vowels:\n            # Find the index of the vowel in the vowels string\n            index = vowels.index(encoded_char)\n\n            # Replace the vowel with the letter 2 places ahead\n            encoded_char = vowels[(index + 2) % 10]\n\n        encoded_message += encoded_char\n\n    return encoded_message"}
{"task_id": "HumanEval/94", "input": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n", "prompt": "Solve the following problem:\n\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n", "output": "def sum_of_digits_of_largest_prime(lst):\n    \"\"\"\n    This function finds the largest prime number in a given list of integers and returns the sum of its digits.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The sum of the digits of the largest prime number in the list.\n    \"\"\"\n\n    def is_prime(n):\n        \"\"\"\n        Helper function to check if a number is prime.\n\n        Args:\n            n (int): The number to check.\n\n        Returns:\n            bool: True if the number is prime, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Filter the list to get the largest prime number\n    primes = [num for num in lst if is_prime(num)]\n    largest_prime = max(primes) if primes else None\n\n    # If no prime numbers were found, return 0\n    if largest_prime is None:\n        return 0\n\n    # Calculate the sum of the digits of the largest prime number\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/96", "input": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n", "prompt": "Solve the following problem:\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n", "output": "def count_up_to(n):\n    \"\"\"\n    Returns a list of the first n prime numbers that are less than n.\n    \n    Args:\n    n (int): A non-negative integer.\n    \n    Returns:\n    list: A list of prime numbers less than n.\n    \"\"\"\n    \n    def is_prime(num):\n        \"\"\"\n        Checks if a number is prime.\n        \n        Args:\n        num (int): The number to check.\n        \n        Returns:\n        bool: True if the number is prime, False otherwise.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if num < n and is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/99", "input": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n", "prompt": "Solve the following problem:\n\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n", "output": "def closest_integer(value):\n    \"\"\"\n    Returns the closest integer to the given value.\n    If the number is equidistant from two integers, round it away from zero.\n\n    Args:\n        value (str): A string representing a number.\n\n    Returns:\n        int: The closest integer to the given value.\n    \"\"\"\n    # Convert the string to a float\n    num = float(value)\n    \n    # Use the built-in round function with the second argument 0 to round to the nearest integer\n    # The round function rounds to the nearest even number in case of a tie\n    # To round away from zero, we use the ceil function if the number is positive and the floor function if it's negative\n    import math\n    if num >= 0:\n        return math.ceil(num)\n    else:\n        return math.floor(num)'"}
