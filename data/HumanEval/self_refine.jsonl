{"task_id": "HumanEval/0", "input": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n", "prompt": "Solve the following problem:\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n", "output": "def calculate_average(data: list[float], threshold: float) -> float:\n    \"\"\"\n    Calculate the average of a list of numbers, excluding values below a given threshold.\n\n    Args:\n        data (list[float]): A list of numbers.\n        threshold (float): The minimum value to be included in the average calculation.\n\n    Returns:\n        float: The average of the numbers in the list, excluding values below the threshold.\n\n    Raises:\n        ValueError: If the input data is empty.\n        ValueError: If all values in the input data are below the threshold.\n    \"\"\"\n    if not data:\n        raise ValueError(\"Input data is empty. Please provide a non-empty list of numbers.\")\n    if all(value < threshold for value in data):\n        raise ValueError(\"All values in the input data are below the threshold. Please provide a list with at least one value above the threshold.\")\n\n    return sum(value for value in data if value >= threshold) / len([value for value in data if value >= threshold])\n\n\ndef main():\n    try:\n        data = [1.0, 2.0, 3.0, 4.0, 5.0]\n        threshold = 3.0\n        average = calculate_average(data, threshold)\n        print(f\"The average of the numbers in the list, excluding values below {threshold}, is: {average}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/1", "input": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n", "prompt": "Solve the following problem:\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n", "output": "def find_parentheses_groups(s):\n    \"\"\"\n    Finds all groups of parentheses in a given string.\n\n    Args:\n        s (str): The input string to search for parentheses groups.\n\n    Returns:\n        list: A list of tuples, where each tuple contains the start and end indices of a parentheses group.\n\n    Raises:\n        TypeError: If the input is not a string.\n        ValueError: If the input string is empty or contains unmatched opening parentheses.\n    \"\"\"\n\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string.\")\n\n    # Check if the input string is empty\n    if len(s) == 0:\n        raise ValueError(\"Input string is empty.\")\n\n    # Initialize a stack to keep track of opening parentheses\n    stack = []\n    # Initialize a list to store the indices of parentheses groups\n    groups = []\n\n    # Iterate over the input string\n    for i, char in enumerate(s):\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(i)\n        # If the character is a closing parenthesis\n        elif char == ')':\n            # If the stack is empty, there's an unmatched closing parenthesis\n            if len(stack) == 0:\n                raise ValueError(f\"Unmatched closing parenthesis at index {i}.\")\n            # Pop the opening parenthesis from the stack\n            opening_index = stack.pop()\n            # Add the indices of the parentheses group to the list\n            groups.append((opening_index, i))\n\n    # If there are unmatched opening parentheses, raise an error\n    if len(stack) > 0:\n        raise ValueError(f\"Unmatched opening parentheses at indices {', '.join(map(str, stack))}.\")\n\n    return groups"}
{"task_id": "HumanEval/2", "input": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n", "prompt": "Solve the following problem:\n\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n", "output": "import math\n\ndef calculate_square_root(number: float) -> float:\n    \"\"\"\n    Calculate the square root of a given number.\n\n    This function takes a positive number as input and returns its square root.\n\n    Args:\n        number (float): A positive number for which the square root is to be calculated.\n\n    Returns:\n        float: The square root of the given number.\n\n    Raises:\n        ValueError: If the input number is not a positive number.\n        TypeError: If the input is not a numeric type.\n    \"\"\"\n    # Check if the input is a numeric type\n    if not isinstance(number, (int, float)):\n        raise TypeError(\"Input must be a numeric type.\")\n\n    # Check if the input number is positive\n    if number < 0:\n        raise ValueError(\"Input number must be a positive number.\")\n\n    # Calculate the square root using the math library\n    square_root = math.sqrt(number)\n\n    return square_root\n\n# Example usage:\ntry:\n    print(calculate_square_root(16))  # Output: 4.0\n    print(calculate_square_root(25))  # Output: 5.0\n    print(calculate_square_root(-1))  # Raises ValueError\n    print(calculate_square_root(\"a\"))  # Raises TypeError\nexcept ValueError as ve:\n    print(ve)\nexcept TypeError as te:\n    print(te)"}
{"task_id": "HumanEval/3", "input": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n", "prompt": "Solve the following problem:\nfrom typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n", "output": "def calculate_total(transactions: list[float]) -> float:\n    \"\"\"\n    Calculate the total cost of a list of transactions.\n\n    Args:\n        transactions (list[float]): A list of transaction amounts.\n\n    Returns:\n        float: The total cost of the transactions.\n\n    Raises:\n        ValueError: If the input list is empty.\n    \"\"\"\n    if not transactions:\n        raise ValueError(\"Input list cannot be empty\")\n\n    return sum(transactions)"}
{"task_id": "HumanEval/4", "input": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n", "prompt": "Solve the following problem:\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n", "output": "No valid output"}
{"task_id": "HumanEval/26", "input": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n", "prompt": "Solve the following problem:\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n", "output": "def diagonal_order_traversal(matrix: list[list[int]]) -> list[int]:\n    \"\"\"\n    Performs a diagonal order traversal of a 2D array.\n\n    The diagonal order is determined by traversing the array in a zigzag pattern,\n    where each diagonal is traversed from top to bottom. The first diagonal starts\n    from the top-left corner, and each subsequent diagonal moves one element to\n    the right and one element down.\n\n    Args:\n        matrix: A 2D array of integers.\n\n    Returns:\n        A list of integers representing the diagonal order traversal of the input matrix.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n    \"\"\"\n\n    # Check if the input is a list of lists\n    if not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists\")\n\n    # Get the number of rows and columns in the matrix\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n\n    # Initialize the result list\n    result = []\n\n    # Initialize the current diagonal index and the current diagonal\n    diagonal_index = 0\n    current_diagonal = []\n\n    # Iterate over the matrix\n    for i = 0\n    while i < num_rows:\n        # Add the current element to the current diagonal\n        current_diagonal.append(matrix[i][diagonal_index])\n\n        # Move to the next element in the current diagonal\n        i += 1\n        diagonal_index += 1\n\n        # If we've reached the end of the current diagonal, add it to the result and reset the current diagonal\n        if diagonal_index >= num_cols:\n            result.extend(current_diagonal)\n            current_diagonal = []\n            diagonal_index = 0\n\n    return result"}
{"task_id": "HumanEval/27", "input": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n", "prompt": "Solve the following problem:\n\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n", "output": "None"}
{"task_id": "HumanEval/28", "input": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n", "prompt": "Solve the following problem:\nfrom typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n", "output": "None"}
{"task_id": "HumanEval/29", "input": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n", "prompt": "Solve the following problem:\nfrom typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n", "output": "def filter_strings_by_prefix(strings: list[str], filter_prefix: str) -> list[str]:\n    \"\"\"\n    Filters a list of strings based on a given prefix.\n\n    Args:\n        strings (list[str]): A list of strings to be filtered.\n        filter_prefix (str): The prefix to filter by. This can be a substring, prefix, or suffix.\n\n    Returns:\n        list[str]: A list of strings that match the given prefix.\n\n    Raises:\n        ValueError: If the filter_prefix is empty.\n    \"\"\"\n\n    # Check if the filter_prefix is empty\n    if not filter_prefix:\n        raise ValueError(\"filter_prefix cannot be empty\")\n\n    # Check if the strings list is None\n    if strings is None:\n        raise ValueError(\"strings list cannot be None\")\n\n    # Check if the strings list is empty\n    if not strings:\n        return []\n\n    # Use list comprehension to filter the strings\n    filtered_strings = [string for string in strings if filter_prefix in string]\n\n    return filtered_strings"}
{"task_id": "HumanEval/30", "input": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n", "prompt": "Solve the following problem:\n\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n", "output": "No valid output"}
{"task_id": "HumanEval/50", "input": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n", "prompt": "Solve the following problem:\n\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n", "output": "None"}
{"task_id": "HumanEval/51", "input": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n", "prompt": "Solve the following problem:\n\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n", "output": "def count_vowels(input_string: str) -> int:\n    \"\"\"\n    Counts the number of vowels in a given string.\n\n    Args:\n        input_string (str): The string to count vowels from.\n\n    Returns:\n        int: The number of vowels in the input string.\n\n    Raises:\n        ValueError: If the input string is empty.\n        TypeError: If the input is not a string.\n    \"\"\"\n\n    # Check if input is a string\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string.\")\n\n    # Check if input string is empty\n    if not input_string:\n        raise ValueError(\"Input string cannot be empty.\")\n\n    # Convert input string to lowercase for case-insensitive counting\n    input_string = input_string.lower()\n\n    # Initialize vowel count to 0\n    vowel_count = 0\n\n    # Iterate over each character in the input string\n    for char in input_string:\n        # Check if character is a vowel\n        if char in 'aeiou':\n            # Increment vowel count if character is a vowel\n            vowel_count += 1\n\n    # Return the total vowel count\n    return vowel_count"}
{"task_id": "HumanEval/52", "input": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n", "prompt": "Solve the following problem:\n\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n", "output": "def all_below_threshold(lst: list[int], threshold: int) -> bool:\n    \"\"\"\n    Checks if all numbers in the input list are below a given threshold.\n\n    Args:\n        lst: A list of integers.\n        threshold: The maximum allowed value.\n\n    Returns:\n        True if all numbers in the list are below the threshold, False otherwise.\n\n    Raises:\n        ValueError: If the input list is empty or contains non-numeric values.\n        TypeError: If the threshold is not an integer.\n        AssertionError: If the threshold is not a positive integer.\n\n    Notes:\n        This function assumes that the input list is not None.\n    \"\"\"\n    # Check if the threshold is a positive integer\n    assert isinstance(threshold, int) and threshold > 0, \"Threshold must be a positive integer\"\n\n    # Check if the input list is not empty and contains only integers\n    if not lst or not all(isinstance(num, int) for num in lst):\n        raise ValueError(\"Input list must not be empty and contain only integers\")\n\n    # Check if all numbers in the list are below the threshold\n    return all(num < threshold for num in lst)"}
{"task_id": "HumanEval/53", "input": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n", "prompt": "Solve the following problem:\n\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n", "output": "def add(a: int, b: int) -> int:\n    \"\"\"\n    Adds two integers together.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The sum of a and b.\n\n    Raises:\n        TypeError: If either a or b is not an integer.\n        ValueError: If the sum of a and b would cause an overflow.\n    \"\"\"\n    # Check if inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers.\")\n\n    # Check for potential overflow\n    if a + b > 2**31 - 1 or a + b < -2**31:\n        raise ValueError(\"The sum of the inputs would cause an overflow.\")\n\n    # Add the numbers\n    return a + b"}
{"task_id": "HumanEval/54", "input": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n", "prompt": "Solve the following problem:\n\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n", "output": "No valid output"}
{"task_id": "HumanEval/69", "input": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n", "prompt": "Solve the following problem:\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n", "output": "def find_greatest_sum(numbers):\n    \"\"\"\n    This function calculates the greatest sum of a subarray within a given list of numbers.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The greatest sum of a subarray.\n\n    Raises:\n        ValueError: If the input list is empty, contains non-integer values, or has less than two elements.\n        TypeError: If the input is not a list.\n    \"\"\"\n\n    # Check if input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if list is empty\n    if len(numbers) == 0:\n        raise ValueError(\"Input list is empty. Please provide a non-empty list of integers.\")\n\n    # Check if list contains non-integer values\n    if not all(isinstance(num, int) for num in numbers):\n        raise ValueError(\"Input list contains non-integer values. Please provide a list of integers.\")\n\n    # Check if list has less than two elements\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements. Please provide a list with at least two integers.\")\n\n    # Initialize variables to store the greatest sum and the current sum\n    greatest_sum = float('-inf')  # Initialize with negative infinity\n    current_sum = 0\n\n    # Iterate over the list to find the greatest sum\n    for num in numbers:\n        # Update the current sum\n        current_sum = max(num, current_sum + num)\n\n        # Update the greatest sum if the current sum is greater\n        greatest_sum = max(greatest_sum, current_sum)\n\n    return greatest_sum"}
{"task_id": "HumanEval/70", "input": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n", "prompt": "Solve the following problem:\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n", "output": "import heapq\n\ndef find_k_largest(nums, k):\n    \"\"\"\n    Find the k largest elements in the given list of numbers.\n\n    Args:\n        nums (list): A list of numbers.\n        k (int): The number of largest elements to find.\n\n    Returns:\n        list: A list of the k largest elements in the input list.\n\n    Raises:\n        ValueError: If the input list is empty or contains non-numeric values.\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Input list is empty\")\n    if not all(isinstance(num, (int, float)) for num in nums):\n        raise ValueError(\"Input list contains non-numeric values\")\n\n    # Create a max heap from the input list\n    max_heap = []\n    for num in nums:\n        # Push the number into the max heap\n        heapq.heappush(max_heap, -num)\n\n    # Extract the k largest elements from the max heap\n    k_largest = []\n    for _ in range(k):\n        if max_heap:\n            k_largest.append(-heapq.heappop(max_heap))\n        else:\n            break\n\n    return k_largest"}
{"task_id": "HumanEval/71", "input": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n", "prompt": "Solve the following problem:\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n", "output": "None"}
{"task_id": "HumanEval/72", "input": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n", "prompt": "Solve the following problem:\n\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n", "output": "def calculate_object_weight(object_weight_list: list[float], maximum_weight: float, maximum_weight_limit: float) -> float:\n    \"\"\"\n    Calculate the total weight of objects and compare it with the maximum weight limit.\n\n    Args:\n        object_weight_list (list[float]): A list of weights of objects.\n        maximum_weight (float): The maximum weight allowed for the objects.\n        maximum_weight_limit (float): The maximum weight limit for the objects.\n\n    Returns:\n        float: The total weight of the objects.\n\n    Raises:\n        TypeError: If object_weight_list is not a list or if maximum_weight or maximum_weight_limit is not a positive number.\n        ValueError: If the total weight of the objects exceeds the maximum weight limit.\n    \"\"\"\n\n    # Input validation\n    if not isinstance(object_weight_list, list):\n        raise TypeError(\"object_weight_list must be a list. Please pass a list as the first argument.\")\n    if not all(isinstance(weight, (int, float)) for weight in object_weight_list):\n        raise TypeError(\"All elements in object_weight_list must be numbers. Please ensure all weights are numbers.\")\n    if maximum_weight <= 0:\n        raise ValueError(\"maximum_weight must be a positive number. Please ensure maximum_weight is a positive number.\")\n    if maximum_weight_limit <= 0:\n        raise ValueError(\"maximum_weight_limit must be a positive number. Please ensure maximum weight limit is a positive number.\")\n\n    # Calculate the total weight of the objects\n    total_weight = sum(object_weight_list)\n\n    # Check if the total weight exceeds the maximum weight limit\n    if total_weight > maximum_weight_limit:\n        raise ValueError(f\"The total weight of the objects ({total_weight}) exceeds the maximum weight limit ({maximum_weight_limit}). Please adjust the weights accordingly.\")\n\n    return total_weight"}
{"task_id": "HumanEval/73", "input": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n", "prompt": "Solve the following problem:\n\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n", "output": "No valid output"}
{"task_id": "HumanEval/83", "input": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n", "prompt": "Solve the following problem:\n\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n", "output": "import sys\n\ndef count_integers_start_or_end_with_1(n):\n    \"\"\"\n    This function calculates the number of integers that start or end with 1 \n    up to a given number n. The mathematical concept behind this function \n    is that the number of integers that start or end with 1 is equivalent to \n    the number of integers that have a remainder of 1 when divided by 10, \n    but this is only true for numbers that are less than 10.\n\n    Parameters:\n    n (int): The upper limit for counting integers that start or end with 1.\n\n    Returns:\n    int: The number of integers that start or end with 1 up to the given number n.\n\n    Raises:\n    ValueError: If n is not a positive integer or if n exceeds the maximum limit of an int in Python.\n    \"\"\"\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Check if n exceeds the maximum limit of an int in Python\n    if n > sys.maxsize:\n        raise ValueError(\"n exceeds the maximum limit of an int in Python\")\n\n    # Initialize count of integers that start or end with 1\n    count = 0\n\n    # Iterate over all numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if the number starts or ends with 1\n        if str(i).startswith('1') or str(i).endswith('1'):\n            # Increment the count if the number starts or ends with 1\n            count += 1\n\n    # Return the count of integers that start or end with 1\n    return count"}
{"task_id": "HumanEval/84", "input": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n", "prompt": "Solve the following problem:\n\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n", "output": "def calculate_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle given its length and width.\n\n    Args:\n        length (int): The length of the rectangle.\n        width (int): The width of the rectangle.\n\n    Returns:\n        int: The area of the rectangle.\n\n    Raises:\n        ValueError: If the input is not a positive integer or if the length or width is not within the range of 0 to 10000.\n    \"\"\"\n\n    # Check if the input is an integer and within the valid range\n    if not isinstance(length, int) or not isinstance(width, int) or not 0 <= length <= 10000 or not 0 <= width <= 10000:\n        raise ValueError(\"Input must be positive integers between 0 and 10000\")\n\n    # Calculate the area\n    area = length * width\n\n    return area\n\n# Example usage:\ntry:\n    length = int(input(\"Enter the length of the rectangle: \"))\n    width = int(input(\"Enter the width of the rectangle: \"))\n    area = calculate_area(length, width)\n    print(f\"The area of the rectangle is: {area}\")\nexcept ValueError as e:\n    print(f\"Error: {e}\")"}
{"task_id": "HumanEval/85", "input": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n", "prompt": "Solve the following problem:\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n", "output": "def calculate_total_sum(numbers: list[int]) -> int:\n    \"\"\"\n    This function calculates the total sum of a list of integers.\n\n    Args:\n        numbers (list[int]): A list of integers.\n\n    Returns:\n        int: The total sum of the integers in the list.\n\n    Example:\n        >>> calculate_total_sum([1, 2, 3, 4, 5])\n        15\n    \"\"\"\n    # Initialize total_sum as an integer to store the sum of the numbers\n    total_sum: int = 0\n    \n    # Iterate over each number in the list\n    for num in numbers:\n        # Check if the number is an integer\n        if not isinstance(num, int):\n            raise TypeError(\"The list must only contain integers.\")\n        \n        # Add the number to the total sum\n        total_sum += num\n    \n    # Return the total sum\n    return total_sum\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nresult = calculate_total_sum(numbers)\nprint(f\"The total sum of the numbers is: {result}\")"}
{"task_id": "HumanEval/86", "input": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n", "prompt": "Solve the following problem:\n\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n", "output": "def sort_characters_in_string(input_string: str) -> str:\n    \"\"\"\n    Sorts the characters in a given string in ascending order.\n\n    Args:\n        input_string (str): The input string to be sorted.\n\n    Returns:\n        str: The sorted string.\n\n    Raises:\n        ValueError: If the input string is empty.\n        UnicodeError: If the input string contains non-ASCII characters that cannot be sorted.\n\n    Notes:\n        The time complexity of this function is O(n log n) due to the use of the built-in sorted function.\n    \"\"\"\n    if not input_string:\n        raise ValueError(\"Input string cannot be empty\")\n\n    try:\n        sorted_string = ''.join(sorted(input_string))\n    except TypeError as e:\n        raise UnicodeError(\"Input string contains non-ASCII characters that cannot be sorted\") from e\n\n    return sorted_string"}
{"task_id": "HumanEval/87", "input": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n", "prompt": "Solve the following problem:\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n", "output": "No valid output"}
